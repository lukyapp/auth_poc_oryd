version: "3.9"

services:
  # ---------- ORY DATABASE ----------
  kratos-postgres:
    image: postgres:16-alpine
    container_name: ory-kratos-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${KRATOS_POSTGRES_USER}
      POSTGRES_PASSWORD: ${KRATOS_POSTGRES_PASS}
    volumes:
      - ./kratos-postgres/data:/var/lib/postgresql/data
      - ./kratos-postgres/init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${KRATOS_POSTGRES_USER}" ]
      interval: 3s
      timeout: 3s
      retries: 30

  hydra-postgres:
    image: postgres:16-alpine
    container_name: ory-hydra-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${HYDRA_POSTGRES_USER}
      POSTGRES_PASSWORD: ${HYDRA_POSTGRES_PASS}
    volumes:
      - ./hydra-postgres/data:/var/lib/postgresql/data
      - ./hydra-postgres/init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${HYDRA_POSTGRES_USER}" ]
      interval: 3s
      timeout: 3s
      retries: 30

  # ---------- ORY MIGRATIONS ----------
  kratos-migrate:
    image: oryd/kratos:v1.3.1
    container_name: ory-kratos-migrate
    restart: "no"
    depends_on:
      kratos-postgres:
        condition: service_healthy
    command: [ "migrate", "sql", "up", "-e", "--yes" ]
    environment:
      DSN: ${KRATOS_DSN}
    volumes:
      - ./kratos/kratos.yml:/etc/config/kratos/kratos.yml:ro
      - ./kratos/identity.schema.json:/etc/config/kratos/identity.schema.json:ro
      - ./kratos/mappers:/etc/config/kratos/mappers:ro

  hydra-migrate:
    image: oryd/hydra:v2.3.0
    container_name: ory-hydra-migrate
    restart: "no"
    depends_on:
      hydra-postgres:
        condition: service_healthy
    command: [ "migrate", "sql", "up", "-e", "--yes" ]
    environment:
      DSN: ${HYDRA_DSN}
      SECRETS_SYSTEM: ${HYDRA_SECRETS_SYSTEM}

  # ---------- ORY KRATOS ----------
  kratos:
    image: oryd/kratos:v1.3.1
    container_name: ory-kratos
    restart: unless-stopped
    depends_on:
      kratos-migrate:
        condition: service_completed_successfully
    # Remove --dev in production; it's OK for local development.
    command: [ "serve", "--dev", "--config", "/etc/config/kratos/kratos.yml" ]
    environment:
      DSN: ${KRATOS_DSN}
      # oauth
      OAUTH2_PROVIDER_URL: http://hydra:4445
      # oauth providers
      # google oauth provider
      SELFSERVICE_METHODS_OIDC_CONFIG_PROVIDERS_0_CLIENT_ID: ${KRATOS_OAUTH_GOOGLE_CLIENT_ID}
      SELFSERVICE_METHODS_OIDC_CONFIG_PROVIDERS_0_CLIENT_SECRET: ${KRATOS_OAUTH_GOOGLE_CLIENT_SECRET}

      # for hydra authorize endpoint : /oauth2/auth
      SELFSERVICE_DEFAULT_BROWSER_RETURN_URL: ${OAUTH_UI_APP_BASE_URL}
      SELFSERVICE_FLOWS_LOGIN_UI_URL: ${OAUTH_UI_APP_LOGIN_URL}
      SELFSERVICE_FLOWS_REGISTRATION_UI_URL: ${OAUTH_UI_APP_REGISTRATION_URL}
      SELFSERVICE_FLOWS_VERIFICATION_UI_URL: ${OAUTH_UI_APP_DEVISE_VERIFICATION_URL}
      SELFSERVICE_FLOWS_ERROR_UI_URL: ${OAUTH_UI_APP_ERROR_URL}
      SELFSERVICE_FLOWS_SETTINGS_UI_URL: ${OAUTH_UI_APP_SETTINGS_URL}
      SELFSERVICE_FLOWS_RECOVERY_UI_URL: ${OAUTH_UI_APP_RECOVERY_URL}
    ports:
      - "4433:4433"   # public -> host
    expose:
      # DO NOT expose admin (4434) to host; keep internal only
      - "4434"        # admin -> internal network only
    volumes:
      - ./kratos/kratos.yml:/etc/config/kratos/kratos.yml:ro
      - ./kratos/identity.schema.json:/etc/config/kratos/identity.schema.json:ro
      - ./kratos/mappers:/etc/config/kratos/mappers:ro

  # ---------- ORY HYDRA ----------
  hydra:
    image: oryd/hydra:v2.3.0
    container_name: ory-hydra
    restart: unless-stopped
    depends_on:
      hydra-migrate:
        condition: service_completed_successfully
    # Remove --dev in production; it's OK for local development.
    command: [ "serve", "all", "--dev", "--config", "/etc/config/hydra/hydra.yml" ]
    environment:
      DSN: ${HYDRA_DSN}
      TTL_ACCESS_TOKEN: ${HYDRA_TTL_ACCESS_TOKEN}
      TTL_REFRESH_TOKEN: ${HYDRA_TTL_REFRESH_TOKEN}
      SECRETS_SYSTEM: ${HYDRA_SECRETS_SYSTEM}

      # URLs publiques
      URLS_SELF_ISSUER: ${HYDRA_JWT_ISSUER}
      # for hydra authorize endpoint : /oauth2/auth
      URLS_LOGIN: ${OAUTH_UI_APP_LOGIN_URL}
      URLS_REGISTRATION: ${OAUTH_UI_APP_REGISTRATION_URL}
      URLS_CONSENT: ${OAUTH_UI_APP_CONSENT_URL}
      URLS_LOGOUT: ${OAUTH_UI_APP_LOGOUT_URL}
      URLS_DEVISE_VERIFICATION: ${OAUTH_UI_APP_DEVISE_VERIFICATION_URL}
      URLS_DEVISE_SUCCESS: ${OAUTH_UI_APP_DEVISE_SUCCESS_URL}
      URLS_ERROR: ${OAUTH_UI_APP_ERROR_URL}
      URLS_POST_LOGOUT_REDIRECT: ${OAUTH_UI_APP_LOGOUT_SUCCESSFUL_URL}
    volumes:
      - ./hydra/hydra.yml:/etc/config/hydra/hydra.yml:ro
    ports:
      - "4444:4444"  # public -> host (includes JWKS)
      # DO NOT expose admin (4445) to host; keep internal only
    expose:
      - "4445"       # admin -> internal network only

  # ---------- ORY HYDRA ----------
  kratos-ui:
    image: oryd/kratos-selfservice-ui-node:v1.3.1
    container_name: ory-kratos-ui
    restart: unless-stopped
    depends_on: [ kratos ]
    environment:
      PORT: 3000
      KRATOS_PUBLIC_URL: http://kratos:4433/
      KRATOS_BROWSER_URL: http://localhost:4433/
      HYDRA_ADMIN_URL: http://hydra:4445/

      COOKIE_SECRET: ${KRATOS_UI_COOKIE_SECRET}
      CSRF_COOKIE_NAME: __Host-kratos_csrf
      CSRF_COOKIE_SECRET: ${KRATOS_UI_CSRF_SECRET}
    ports:
      - "3000:3000"

# ---------- END ----------
networks:
  default:
    name: ory-net
